/**
 * 给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。
 * 你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润。
 * 返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。
 *
 *
 * 要知道 **哪一天** **什么样的持股状态** 利润最大
 * 那就去看 **每一天** **手上有股票** 和 **手上没有股票** 的最大利润, 结果应该是两者中大的那个
 * 这就是状态
 * 那么如何变成某一天的状态呢
 * 1. 第N天手上持股的最大利润是Math.max(前一天手上持股的最大利润, 当天购买股票的最大利润(这个是负值, 购买嘛, 其实是支出))
 * 2. 第N天手上没有股票的最大利润是Math.max(前一天手上没有股票的最大利润, 前一天手上持股的最大利润+当天卖掉股票价值)
 *
 * 以上就是状态转移公式了
 *
 * 边界条件是第一天的两个数值
 * 1. 第一天手上没有股票， 最大利润为0
 * 2. 第一天手上有股票， 最大为-prices[0]
 */
function maxProfit(prices) {
  if (prices == null || prices.length == 0) return 0;
  // 边界条件
  const dp = [];
  // 边界条件
  dp[0] = [0, -prices[0]];

  for (let i = 1, l = prices.length; i < l; i += 1) {
    // 状态转移
    dp.push([
      Math.max(dp[i - 1][0], dp[i - 1][1] + prices[i]),
      Math.max(dp[i - 1][1], -prices[i]),
    ]);
  }

  return dp[dp.length - 1][0];
}

console.log(maxProfit([7, 1, 5, 3, 6, 4]));
